version: '3.7'

volumes:
    prometheus_data: {}
    grafana_data: {}

networks:
  app:
    driver: bridge
  front-tier:
  back-tier:

services:
  grpc-server:
    build: ./cmd/grpc-server
    depends_on:
      - postgres
    restart: on-failure
    environment:
      - GRPC_SERVER_HOST=:5900
      - GRPC_SERVER_STORAGE=1
      - GRPC_SERVER_CONN=postgres://calendar:password@postgres/ms_calendar?sslmode=disable
    networks: 
      - app

  rest-server:
    build: ./cmd/rest-server
    depends_on:
      - grpc-server
    hostname: rest-server
    restart: on-failure
    ports:
     - "5000:5000"
    environment:
      - REST_SERVER_GRPC_HOST=grpc-server:5900
      - REST_SERVER_HOST=:5000
      - REST_SERVER_LOGGER=1
    networks: 
      - app

  event-searcher:
    build: ./cmd/event-searcher
    depends_on:
      - grpc-server
      - zookeeper
      - kafka
    restart: on-failure
    environment:
      - EVENT_SEARCHER_HOST=kafka:9092
      - EVENT_SEARCHER_TOPIC=calendar_eventsForSend      
      - EVENT_SEARCHER_GRPC_HOST=grpc-server:5900
      - EVENT_SEARCHER_DELAY=60
      - EVENT_SEARCHER_LOGGER=1
    networks: 
      - app

  event-sender:
    build: ./cmd/event-sender
    depends_on:
      - event-searcher
      - kafka
    restart: on-failure
    environment:
      - EVENT_SENDER_HOST=kafka:9092
      - EVENT_SENDER_TOPIC=calendar_eventsForSend
      - EVENT_SENDER_LOGGER=1
    networks: 
      - app

  postgres:
    image: postgres:11.1
    restart: on-failure
    environment:
      POSTGRES_USER: calendar
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ms_calendar
    volumes:
      - ./scripts/setup.sql:/docker-entrypoint-initdb.d/setup.sql
    networks:
      - app 

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    depends_on:
      - kafka
    logging:
      driver: none
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    restart: on-failure
    networks: 
      - app
  kafka:
    image: 'bitnami/kafka:latest'
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    logging:
      driver: none
    restart: on-failure
    networks: 
      - app

# ------------------------------ prometheus ------------------------------
  prometheus:
    image: prom/prometheus:v2.1.0
    volumes:
      - ./scripts/prometheus/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - app
      - back-tier
    restart: always

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - back-tier
    restart: always
    #deploy:
    #  mode: global

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./scripts/prometheus/alertmanager/:/etc/alertmanager/
    networks:
      - back-tier
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - back-tier
    restart: always
    #deploy:
    #  mode: global

  grafana:
    image: grafana/grafana
    user: "104"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./scripts/prometheus/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./scripts/prometheus/grafana/config.monitoring
    networks:
      - back-tier
      - front-tier
    restart: always
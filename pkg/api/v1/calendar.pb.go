// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calendar.proto

/*
Package calendarpb is a generated protocol buffer package.

It is generated from these files:
	calendar.proto

It has these top-level messages:
	Event
	GetRequest
	GetResponse
	GetAllRequest
	GetAllResponse
	AddRequest
	EditRequest
	RemoveRequst
	AddResponse
	EditResponse
	RemoveResponse
	GetEventsForNotifyRequest
	GetEventsForNotifyResponse
	SetEventAsSendedRequest
	SetEventAsSendedResponse
*/
package calendarpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	UserId     int32                      `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Uuid       string                     `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
	CreateDate *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=createDate" json:"createDate,omitempty"`
	Message    string                     `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	EventDate  *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=eventDate" json:"eventDate,omitempty"`
	IsSended   bool                       `protobuf:"varint,6,opt,name=isSended" json:"isSended,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Event) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Event) GetCreateDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreateDate
	}
	return nil
}

func (m *Event) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Event) GetEventDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.EventDate
	}
	return nil
}

func (m *Event) GetIsSended() bool {
	if m != nil {
		return m.IsSended
	}
	return false
}

type GetRequest struct {
	UserId int32  `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Uuid   string `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type GetResponse struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type GetAllRequest struct {
	UserId int32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *GetAllRequest) Reset()                    { *m = GetAllRequest{} }
func (m *GetAllRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllRequest) ProtoMessage()               {}
func (*GetAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetAllRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetAllResponse struct {
	Events []*Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *GetAllResponse) Reset()                    { *m = GetAllResponse{} }
func (m *GetAllResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAllResponse) ProtoMessage()               {}
func (*GetAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetAllResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type AddRequest struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (m *AddRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EditRequest struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *EditRequest) Reset()                    { *m = EditRequest{} }
func (m *EditRequest) String() string            { return proto.CompactTextString(m) }
func (*EditRequest) ProtoMessage()               {}
func (*EditRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EditRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type RemoveRequst struct {
	UserId int32  `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Uuid   string `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *RemoveRequst) Reset()                    { *m = RemoveRequst{} }
func (m *RemoveRequst) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequst) ProtoMessage()               {}
func (*RemoveRequst) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RemoveRequst) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RemoveRequst) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type AddResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *AddResponse) Reset()                    { *m = AddResponse{} }
func (m *AddResponse) String() string            { return proto.CompactTextString(m) }
func (*AddResponse) ProtoMessage()               {}
func (*AddResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AddResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type EditResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *EditResponse) Reset()                    { *m = EditResponse{} }
func (m *EditResponse) String() string            { return proto.CompactTextString(m) }
func (*EditResponse) ProtoMessage()               {}
func (*EditResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *EditResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RemoveResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RemoveResponse) Reset()                    { *m = RemoveResponse{} }
func (m *RemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveResponse) ProtoMessage()               {}
func (*RemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RemoveResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type GetEventsForNotifyRequest struct {
}

func (m *GetEventsForNotifyRequest) Reset()                    { *m = GetEventsForNotifyRequest{} }
func (m *GetEventsForNotifyRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEventsForNotifyRequest) ProtoMessage()               {}
func (*GetEventsForNotifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type GetEventsForNotifyResponse struct {
	Events []*Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *GetEventsForNotifyResponse) Reset()                    { *m = GetEventsForNotifyResponse{} }
func (m *GetEventsForNotifyResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEventsForNotifyResponse) ProtoMessage()               {}
func (*GetEventsForNotifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetEventsForNotifyResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type SetEventAsSendedRequest struct {
	UserId int32  `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Uuid   string `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *SetEventAsSendedRequest) Reset()                    { *m = SetEventAsSendedRequest{} }
func (m *SetEventAsSendedRequest) String() string            { return proto.CompactTextString(m) }
func (*SetEventAsSendedRequest) ProtoMessage()               {}
func (*SetEventAsSendedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SetEventAsSendedRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetEventAsSendedRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type SetEventAsSendedResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *SetEventAsSendedResponse) Reset()                    { *m = SetEventAsSendedResponse{} }
func (m *SetEventAsSendedResponse) String() string            { return proto.CompactTextString(m) }
func (*SetEventAsSendedResponse) ProtoMessage()               {}
func (*SetEventAsSendedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SetEventAsSendedResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Event)(nil), "calendar.Event")
	proto.RegisterType((*GetRequest)(nil), "calendar.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "calendar.GetResponse")
	proto.RegisterType((*GetAllRequest)(nil), "calendar.GetAllRequest")
	proto.RegisterType((*GetAllResponse)(nil), "calendar.GetAllResponse")
	proto.RegisterType((*AddRequest)(nil), "calendar.AddRequest")
	proto.RegisterType((*EditRequest)(nil), "calendar.EditRequest")
	proto.RegisterType((*RemoveRequst)(nil), "calendar.RemoveRequst")
	proto.RegisterType((*AddResponse)(nil), "calendar.AddResponse")
	proto.RegisterType((*EditResponse)(nil), "calendar.EditResponse")
	proto.RegisterType((*RemoveResponse)(nil), "calendar.RemoveResponse")
	proto.RegisterType((*GetEventsForNotifyRequest)(nil), "calendar.GetEventsForNotifyRequest")
	proto.RegisterType((*GetEventsForNotifyResponse)(nil), "calendar.GetEventsForNotifyResponse")
	proto.RegisterType((*SetEventAsSendedRequest)(nil), "calendar.SetEventAsSendedRequest")
	proto.RegisterType((*SetEventAsSendedResponse)(nil), "calendar.SetEventAsSendedResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CalendarEvents service

type CalendarEventsClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditResponse, error)
	Remove(ctx context.Context, in *RemoveRequst, opts ...grpc.CallOption) (*RemoveResponse, error)
	GetEventsForSend(ctx context.Context, in *GetEventsForNotifyRequest, opts ...grpc.CallOption) (*GetEventsForNotifyResponse, error)
	SetEventAsSended(ctx context.Context, in *SetEventAsSendedRequest, opts ...grpc.CallOption) (*SetEventAsSendedResponse, error)
}

type calendarEventsClient struct {
	cc *grpc.ClientConn
}

func NewCalendarEventsClient(cc *grpc.ClientConn) CalendarEventsClient {
	return &calendarEventsClient{cc}
}

func (c *calendarEventsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/calendar.CalendarEvents/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarEventsClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := grpc.Invoke(ctx, "/calendar.CalendarEvents/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarEventsClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := grpc.Invoke(ctx, "/calendar.CalendarEvents/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarEventsClient) Edit(ctx context.Context, in *EditRequest, opts ...grpc.CallOption) (*EditResponse, error) {
	out := new(EditResponse)
	err := grpc.Invoke(ctx, "/calendar.CalendarEvents/Edit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarEventsClient) Remove(ctx context.Context, in *RemoveRequst, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := grpc.Invoke(ctx, "/calendar.CalendarEvents/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarEventsClient) GetEventsForSend(ctx context.Context, in *GetEventsForNotifyRequest, opts ...grpc.CallOption) (*GetEventsForNotifyResponse, error) {
	out := new(GetEventsForNotifyResponse)
	err := grpc.Invoke(ctx, "/calendar.CalendarEvents/GetEventsForSend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarEventsClient) SetEventAsSended(ctx context.Context, in *SetEventAsSendedRequest, opts ...grpc.CallOption) (*SetEventAsSendedResponse, error) {
	out := new(SetEventAsSendedResponse)
	err := grpc.Invoke(ctx, "/calendar.CalendarEvents/SetEventAsSended", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CalendarEvents service

type CalendarEventsServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Edit(context.Context, *EditRequest) (*EditResponse, error)
	Remove(context.Context, *RemoveRequst) (*RemoveResponse, error)
	GetEventsForSend(context.Context, *GetEventsForNotifyRequest) (*GetEventsForNotifyResponse, error)
	SetEventAsSended(context.Context, *SetEventAsSendedRequest) (*SetEventAsSendedResponse, error)
}

func RegisterCalendarEventsServer(s *grpc.Server, srv CalendarEventsServer) {
	s.RegisterService(&_CalendarEvents_serviceDesc, srv)
}

func _CalendarEvents_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarEventsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.CalendarEvents/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarEventsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarEvents_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarEventsServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.CalendarEvents/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarEventsServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarEvents_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarEventsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.CalendarEvents/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarEventsServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarEvents_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarEventsServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.CalendarEvents/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarEventsServer).Edit(ctx, req.(*EditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarEvents_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarEventsServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.CalendarEvents/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarEventsServer).Remove(ctx, req.(*RemoveRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarEvents_GetEventsForSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsForNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarEventsServer).GetEventsForSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.CalendarEvents/GetEventsForSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarEventsServer).GetEventsForSend(ctx, req.(*GetEventsForNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarEvents_SetEventAsSended_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEventAsSendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarEventsServer).SetEventAsSended(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.CalendarEvents/SetEventAsSended",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarEventsServer).SetEventAsSended(ctx, req.(*SetEventAsSendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalendarEvents_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calendar.CalendarEvents",
	HandlerType: (*CalendarEventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CalendarEvents_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _CalendarEvents_GetAll_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _CalendarEvents_Add_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _CalendarEvents_Edit_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _CalendarEvents_Remove_Handler,
		},
		{
			MethodName: "GetEventsForSend",
			Handler:    _CalendarEvents_GetEventsForSend_Handler,
		},
		{
			MethodName: "SetEventAsSended",
			Handler:    _CalendarEvents_SetEventAsSended_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar.proto",
}

func init() { proto.RegisterFile("calendar.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0x71, 0xe2, 0xa6, 0xe3, 0x10, 0xaa, 0x15, 0xb4, 0x8b, 0x39, 0x60, 0x0c, 0x28, 0x16,
	0x07, 0x57, 0x72, 0x8b, 0x54, 0xc2, 0x29, 0x40, 0x88, 0xb8, 0x70, 0x70, 0xb9, 0x80, 0xc4, 0xc1,
	0xc9, 0x4e, 0x23, 0x4b, 0x49, 0x1c, 0xbc, 0xeb, 0x4a, 0x7c, 0x2d, 0x12, 0x5f, 0x82, 0xb2, 0xde,
	0xad, 0xb7, 0x69, 0x88, 0x09, 0x37, 0xcf, 0xce, 0x9b, 0x79, 0x6f, 0x66, 0x9e, 0x0c, 0xbd, 0x69,
	0x3a, 0xc7, 0x25, 0x4b, 0x8b, 0x68, 0x55, 0xe4, 0x22, 0x27, 0x1d, 0x1d, 0x7b, 0x4f, 0x67, 0x79,
	0x3e, 0x9b, 0xe3, 0xa9, 0x7c, 0x9f, 0x94, 0x57, 0xa7, 0x22, 0x5b, 0x20, 0x17, 0xe9, 0x62, 0x55,
	0x41, 0x83, 0x5f, 0x16, 0xb4, 0x47, 0xd7, 0xb8, 0x14, 0xe4, 0x18, 0x9c, 0x92, 0x63, 0xf1, 0x89,
	0x51, 0xcb, 0xb7, 0xc2, 0x76, 0xa2, 0x22, 0x42, 0xa0, 0x55, 0x96, 0x19, 0xa3, 0xf7, 0x7c, 0x2b,
	0x3c, 0x4c, 0xe4, 0x37, 0x19, 0x00, 0x4c, 0x0b, 0x4c, 0x05, 0x7e, 0x48, 0x05, 0x52, 0xdb, 0xb7,
	0x42, 0x37, 0xf6, 0xa2, 0x8a, 0x2b, 0xd2, 0x5c, 0xd1, 0x17, 0xcd, 0x95, 0x18, 0x68, 0x42, 0xe1,
	0x60, 0x81, 0x9c, 0xa7, 0x33, 0xa4, 0x2d, 0xd9, 0x52, 0x87, 0xe4, 0x02, 0x0e, 0x71, 0x2d, 0x45,
	0x36, 0x6d, 0x37, 0x36, 0xad, 0xc1, 0xc4, 0x83, 0x4e, 0xc6, 0x2f, 0x71, 0xc9, 0x90, 0x51, 0xc7,
	0xb7, 0xc2, 0x4e, 0x72, 0x13, 0x07, 0x17, 0x00, 0x63, 0x14, 0x09, 0xfe, 0x28, 0x91, 0xef, 0x35,
	0x65, 0x70, 0x0e, 0xae, 0xac, 0xe4, 0xab, 0x7c, 0xc9, 0x91, 0xbc, 0x84, 0xb6, 0x64, 0x94, 0x95,
	0x6e, 0xfc, 0x20, 0xba, 0xd9, 0xba, 0x5c, 0x60, 0x52, 0x65, 0x83, 0x3e, 0xdc, 0x1f, 0xa3, 0x18,
	0xce, 0xe7, 0x0d, 0x94, 0xc1, 0x1b, 0xe8, 0x69, 0xa0, 0x62, 0xe8, 0x83, 0x23, 0x7b, 0x70, 0x6a,
	0xf9, 0xf6, 0x36, 0x0a, 0x95, 0x0e, 0xce, 0x00, 0x86, 0x8c, 0x69, 0x82, 0x7f, 0x14, 0x76, 0x0e,
	0xee, 0x88, 0x65, 0x62, 0xcf, 0xaa, 0x01, 0x74, 0x13, 0x5c, 0xe4, 0xd7, 0xb8, 0xae, 0xdb, 0x73,
	0x81, 0x7d, 0x70, 0xa5, 0x4c, 0x35, 0x1e, 0x85, 0x03, 0x5e, 0x4e, 0xa7, 0xc8, 0xb9, 0xac, 0xed,
	0x24, 0x3a, 0x0c, 0x42, 0xe8, 0x56, 0xd2, 0x1a, 0x91, 0xaf, 0xa0, 0xa7, 0xe5, 0x34, 0x62, 0x9f,
	0xc0, 0xe3, 0x31, 0x0a, 0x39, 0x0d, 0xff, 0x98, 0x17, 0x9f, 0x73, 0x91, 0x5d, 0xfd, 0x54, 0xe3,
	0x07, 0x23, 0xf0, 0xb6, 0x25, 0xf7, 0xbd, 0xc4, 0x08, 0x4e, 0x2e, 0x55, 0x9b, 0xa1, 0x72, 0xdc,
	0xff, 0x59, 0x8d, 0xde, 0x6d, 0xd3, 0x34, 0x60, 0xfc, 0xdb, 0x86, 0xde, 0x7b, 0xa5, 0xab, 0x9a,
	0x84, 0xc4, 0x60, 0x8f, 0x51, 0x90, 0x87, 0xb5, 0xde, 0xda, 0xfc, 0xde, 0xa3, 0x8d, 0x57, 0x45,
	0xf0, 0x16, 0x9c, 0xca, 0x88, 0xe4, 0xe4, 0x16, 0xa0, 0xf6, 0xb0, 0x47, 0xef, 0x26, 0x54, 0x71,
	0x0c, 0xf6, 0x90, 0x31, 0x93, 0xb0, 0x76, 0xa6, 0x49, 0x68, 0x1a, 0xe1, 0x35, 0xb4, 0xd6, 0xe7,
	0x26, 0x46, 0xda, 0x70, 0xa6, 0x77, 0xbc, 0xf9, 0xac, 0xca, 0x06, 0xe0, 0x54, 0xb7, 0x27, 0x06,
	0xc2, 0x34, 0xa7, 0x29, 0x73, 0xc3, 0x25, 0xdf, 0xe1, 0xc8, 0x3c, 0xf7, 0x7a, 0xc5, 0xe4, 0xf9,
	0xad, 0xa1, 0xb6, 0xfb, 0xc4, 0x7b, 0xb1, 0x1b, 0xa4, 0xda, 0x7f, 0x85, 0xa3, 0xcd, 0xfb, 0x91,
	0x67, 0x75, 0xe5, 0x5f, 0x2c, 0xe2, 0x05, 0xbb, 0x20, 0x55, 0xeb, 0x77, 0xdd, 0x6f, 0xa0, 0x41,
	0xab, 0xc9, 0xc4, 0x91, 0x3f, 0xc2, 0xb3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x8a, 0x53,
	0x07, 0xf3, 0x05, 0x00, 0x00,
}
